in the previous weeks we started with requirements we created an SRS we looked at user stories we created the UI for these stories now before we start development we have to create the design of the system what is the design design is a way of organizing the core that you will implement and providing a structure to the software system how do we go about doing this and what should we get after such a design process is it the code directly or is it some intermediate representation what is the outcome of this design process we will look at all these points in this week so what is the outcome of the design process broadly speaking there are four outcomes firstly we have the components of the different aspects of the design then there are the interfaces between the components then we have the data structures which store the data and we have the algorithms which run on this data in order to produce the desired result so what are each of these [Music] so the components are what you might understand as modules of the solution so it is a collection of functions and data shared by these functions so the idea behind these modules is that each module should accomplish some well-defined task and the modules all work together to provide the functionality of the system what are interfaces interfaces are nothing but the way in which components or modules communicate with each other so they Define the manner in which data is exchanged between these components the need here is that the sending component and the receiving component need to be able to understand how to interpret the data that is exchanged so that is called an interface we will learn more about this as we go along then there are the data structures for individual components right I mean you are all familiar with arrays and lists and trees and so on so how different data is implemented or stored is captured by the data structures that we use within the modules and finally there is the algorithm which actually runs which on the data in order to produce the desired effect so components and interfaces are the key elements in a high level software design this high level design is known as the software architecture once the architecture is decided then we can move into lower level design details as we will see in the coming videos the focus of this week is to understand how we can represent this high level design of the system in later weeks we will look at essential practices and guidelines for creating effective software architectures there are many different types of notations that are used to represent a high level design the most popular one is called uml or unified modeling language uml can be used to describe different views of the system a user's view a functionality view a messages View and so on so we will look at uml diagrams in detail in the upcoming videos so now let's look at the example of the Amazon Seller portal right we have looked at this example in the past weeks as well so how did we start building this system so we started with the requirements which we collected from the clients from the stakeholders through the SRS through user stories and we created different user stories which describe different functionalities of this system for example we have a view inventory user story which enables a seller to view his or her inventory and we have another feature for tracking customer feedback so we collected several or created several of these user stories and now we have to implement and now that we have these different requirements or user stories now we identify common functionalities and we then group them together into tasks we saw this in the software project management week right and these tasks can form the components of the system for example we identified components like the catalog management component the inventory management payment tracking and so on so now how can these broad or these components be represented using uml diagrams and other notations is the focus of this week so here is a reflection spot what is good software design let us say you come up with the main components and interfaces of your system now how do you know that this system is good take a moment to think about this there are many characteristics of a good software design one of them is called correctness that is does it correctly implement the functionality of the system as we saw earlier the main way to do this is to ensure that requirements are correctly captured first ensure that the requirements are not ambiguous they do not conflict with each other and they are complete this can ensure that all the functionalities are correctly captured in the design another characteristic of good software design is efficiency efficiency means that we want to ensure that the resources that is the time and the space and the cost are managed well for example when you are trying to choose the development framework for an application you have to decide whether this is the correct one that depends upon the application whether you are building a client server application or whether you are building a mission critical system and so on for example if you are building an embedded system then it has to work under limited memory sizes so does the design ensure that these considerations are met so this is another important Criterion that characterizes good software design one more important characteristic is maintainability that is indain the code or in the code or make some changes as we saw earlier requirements can change either during the process of software design itself or later so new requests can come even after the product is released sometimes you want to upgrade the product let us say so in all these cases we do not want to redesign the entire software from scratch so it is important to ensure that the design is maintainable what does that mean that means that we can make these changes in the existing design and the existing code itself without too much effort and finally one more important characteristic of good software design is understandability what do we mean by understandability and why is it important understandability simply means that everyone in the team should be able to follow the design why is it important unless everybody can understand the design they won't be able to implement the system which can in turn lead to bugs and higher development as well as maintenance costs so apart from correctness understandability is also an important issue to consider while judging a design in this week we will look at certain characteristics which make the design more understandable hence in turn leading to creation of better designs