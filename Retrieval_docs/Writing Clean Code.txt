we looked at a quantitative way of measuring the quality of our code right and this is known as software metrics however often times several code characteristics are not captured by such quantitative metrics sometimes when we write our code and let's say we re-read it again some lines of code some functions some variables you know they might not seem right although they get the job done and they implement the feature some characteristics of a code are not very elegant and you might feel that they can be returned better or we can modify the code so that it can be a little more elegant right so these inelegant pieces of code is known as code smells so what are code smells cold smells are nothing but certain problematic characteristics in a code foreign excellent resource for a list of such code smells can be found in a book by Robert Martin known as clean code and it has a list of 63 code smells so going through all of them is beyond the scope of this course but we will be looking at some of them in this video so there are code smells related to comments right so one such example is redundant comments right we should use comments only to explain why we have implemented a certain feature right such comments like incrementing I by 1 is obvious by reading the code hence we should avoid redundant comments whenever possible another code smell is commented out code right often at times you would while you develop or others when they develop or write code oftentimes they feel it's not needed and they comment it out right so Robert Martin suggests and strongly believes that such commented out code should not be part of the code base it is best to delete it the reason being if someone wants to use it later on as we saw using Version Control Systems we can always get the history of our code and it's best to remove out these commented out code another category of code smells are related to functions right and the key important principle to remember is that functions doing more than one thing is bad so that is a code smell so whenever we write functions they should be short and they should do only one thing so functions that are too long right that indirectly implies that they are doing more than one thing so it's best to keep your functions short functions that have too many arguments so Robert Martin suggests that ideally function should not have any arguments or they should have one two or at most three arguments and if a function has more than three arguments it might mean that it is doing more than one thing and it is best to divide that function into multiple function and functions having flag arguments are also problematic right so what are flag arguments So based on the value of the flag the function will do a particular set of operations and in earlier weeks we saw that this is control coupling right and this is not desirable and the solution for this is to again split this function into multiple functions where each function implements a particular value of the flag and then there are dead functions which are functions which are not called by any any function in your code base right so it's best to remove such dead functions then there are General code smells so there are several examples we will look at some of them but a key and important principle is the dry principle or don't repeat yourself principle so what does this mean so oftentimes even when we write code you know in the first run we will have these groups of lines of code right which are identical interspersed throughout our program right so the best way to avoid this is to put these identical lines of code in simple methods and call those methods in your program so this is another example of the dry principle being violated right so you can see that there are multiple conditions sub conditions in the main condition a way to fix this is to create a list and check if that variable is present in that list so we looked at the dry principle another code smell is incorrect Behavior at the boundaries right so even many a times when we also code we fail to check the boundary conditions and as developers it is very important that our code satisfies the requirements for all conditions even at the boundaries and another gen General and very intuitive goal or idea is to use explanatory variables throughout our code right so in the previous example let's say we had a variable called m and oftentimes it's not it's not very easy to understand what m means hence a better way to rename m is to write something like 30 day months which is self-explanatory so always use explanatory variables in your code so now let's say we have these code smells right how do you change your code such that these code smells can be removed and that can be done using the process known as refactoring so refactoring is nothing but changing The Code by improving its structure right without changing its Behavior so let's say you have written your code and it works and it is satisfying the requirements you have checked the boundary conditions but then you realize that there are certain things which can be improved for example you might be repeating yourselves in several places right your functions might be long they might be having too many arguments so once you finish writing your code an important step is to refactor your code right improve the structure of your code remove code smells without changing the behavior of your code and there are several tools which can help you refactor your code effectively and there are tools in Python like pilot play Kate vulture Etc and in this video we will be looking at Pi length pilant is a static code analyzer so pylin goes through your source code and checks for errors in naming convention or it examines other code smells in your code so let's see how we can use pilot so this is the same program which we saw earlier which calculates the first n Primes right and to use pylent I have to first install it so I type in PIP install pilot or this user right and since I already have it installed in my system it gives me these messages and now I can type pilint and the file name right and when I run this I get several messages right and notice that these are not related to the input or the output or the logic of the program but there are different messages related to let's say the naming convention here you say it's saying that a function or the doc string is missing right the argument or the variable does not conform to snake case right which is in Python the naming convention is to write or give underscores after each word right so that is known as snake case so some of the arguments and variables do not conform to this style right and uh so these are messages related to the convention which is C and W is a warning sign right so in this way pylent gives us or gives details about how we can improve the naming conventions and structure of our code so for example here if I give a variable C equal to say some number one right or let's say if I let's say if it's a very large function and I type in something here right a equal to 5 something b equal to 10 right and what pilint does is it it tells us that these variables c a b are unused right those are warnings which pylon gives us and it also tells us that these line numbers right 25 line number 25 onwards is unreachable right and in a way vs code also gives us These Warnings because vs code itself has some linters pre-installed right so in most IDs you will see that it has some linters or static code analyzers pre-installed in them and that's why you can use these linters in your IDs as well so now if I remove so using such linters you can look at how you can improve the readability as well as remove code smells in your code so pilot and other tools can help you do that