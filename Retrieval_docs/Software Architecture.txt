of our system you were introduced to important Concepts like creating a modular and layered design and how we can use modeling languages like uml to represent these designs now that you started developing or writing code for your system it is once again important to take the big picture view in order to make sure that everything is going along as intended this is the software architecture software architecture is a way of organizing your code how should different classes or modules be organized it is actually similar to building the architecture of any product so there is an efficient way in which an entire building or a house is constructed there is efficiency of space efficiency of functionality and so on software architecture is quite similar it defines the software elements or modules the relations among them and the properties of both the modules and the relations now this might all sound very abstract so let us see some examples so here's a reflection spot let us take an example of two software systems Google search engine and another which is a compiler if we consider these as software systems what are some key differences between these two systems so what is the difference between a Google Search and engine type of software system and a compiler Software System right so let's look at Google search so Google search is essentially a web-based system so when I as a user type A search query a request goes to one of the servers of Google and Google returns a response which returns Pages related to my query and these type of systems are commonly known as client server systems where data transactions happen in response to requests and you might know that this is put on predominantly how the internet functions today right so this client server system is a type of software architecture where there are systems which behave as clients and other systems which behave as servers now let's look at a compiler right so what does a compiler do compiler it takes source code AS input and then transforms it into what is known as assembly code and then again transforms this into an executable file which can be run by the underlying operating system right and this type of software system is known as a pipe and filter type of system where data is passed from one component to the other component and it is transformed and filtered along the way so if you have noticed this client server type of system which is like a Google search engine is different from a compiler system which is a pipe and filter type of system so the interactions which the different components have with each other are different so in a client server model the client and server they communicate with each other through requests and response whereas in a pipe and filter type of system data is passed from one component to the other so these types of patterns of information between different components they are known as software architecture styles so let's look at some more examples to highlight this concept another type of software architecture is known as the model view controller or the MVC type of architecture so in this style the views of the data are separated from the manipulations of the data so let's look at this MVC architecture so m stands for model which is usually the component Which models the data required for the service so for example in the case of the Amazon Seller portal the model is nothing but the classes or the objects which model the tables in the database now the view component is nothing but the GUI objects the presentation layer or the visual representation of the model for example how information is seen on a particular website so the view component it retrieves data from the model and displays it to the user and it also passes request back and forth between the user and the model now the controller component it coordinates multiple views on the screen and helps users manipulate the model so for example you can have a filter catalog items which is based on name in the case of the Amazon Seller portal right so in this case the controller sends this message to the model which receives the user input and sends the appropriate messages to its underlying views another type of software architecture is known as peer-to-peer or P2P so P2P architecture is nothing but a distributed application where different systems they form nodes and they share resources with each other so unlike a client server model or the MVC type of architecture there does not exist a centralized system which monitors all the transactions of the system so nodes in the network they make a portion of their resources such as processing power the disk storage directly available to all the other nodes in the network without the need for Central coordination by servers or stable hosts now let us examine the common aspects in the different architectural styles that we saw earlier what is similar one important aspect of these tiles is the notion of a component recall from the first week that we said that a software is divided into components component is nothing but some well defined functionality or behavior separate from other functionality and behavior for example in a client server system the client software is a component and the server software is another component your browser which sends a request to a search engine is a component and the server which responds to the request is a component now that we have seen what components are another important unit of the architecture is connectors components cannot function in isolation they have to be able to talk to each other these are the connectors so characters are code that transmit information between the components they are responsible for regulating the interaction among the components now there needs to be a standard way in which components can interact with each other these are called protocols a protocol is nothing but a set of predefined rules which describe how the component should interact with each other for example it may be that let us say there are there is the client component and the server component now both the client component and the server component need to understand and agree upon the way in which the message will be transmitted between them right it cannot be that the client sends the message you know in one format while the server is attempting to process the same message in a different format so the protocol or connector is the understanding between these two components the most common type of connectors are function calls and rest API calls you have specific rules to create endpoints which help you communicate with other components so how do we come up with the components of a software system in the past experienced designers consciously reused solutions that have worked in the past so there would be libraries of various modules and many of these Solutions later became standardized and are commonly known as design patterns so there are several good books on design patterns for example there is one on elements of reusable object oriented software then there is design patterns and so on the key idea is a design pattern is a description of communicating objects and classes that are customized to solve a general design problem so we will be looking at some design patterns in later videos in this week even if we have knowledge of good design patterns often even with good intentions one might not use a pattern correctly or new code might get added along the way this is actually known as an anti-pattern so this can actually lead to lot of problems in the code so now what are warning signs that you may be headed towards an anti-pattern interestingly enough this is called a design smell so a key way to avoid such design smells is to follow effective guidelines of software architecture this is known as the solid guidelines okay which we will discuss in upcoming videos solid is basically an acronym OK s stands for single responsibility o stands for open closed and so on so we will see all these details as we go along so when you see that there are design smells in your architecture moving back towards a good design process is known as refactoring refactoring a design involves moving code between classes creating new classes and modules or removing classes that are not required we will see how we can refactor code using the solid guidelines as we go along so to summarize software architecture is a way of organizing your code how should the different classes and modules be organized there are several architecture Styles client server pipe and fitter peer-to-peer model view controller and so on briefly we looked at some design patterns which are the common patterns of organizing code that have worked out in the past we also had a quick look at design smells which is what happens when there are lack of proper design patterns the next videos we will look at guidelines for creating effective software architecture using the solid guidelines