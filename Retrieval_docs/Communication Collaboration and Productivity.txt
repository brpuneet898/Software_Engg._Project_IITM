while it may seem to be an obvious thing that we will do when in large teams it's important to do communication systematically and frequently why because everyone in the team is together building a product so everyone needs to have a joint vision of what is it that they are trying to build right we have to stay consistent even as the building of the product is distributed to many people this idea is known as conceptual integrity which basically means everyone in the team has the same view or understanding of what is being built and why it's being built how do we ensure this conceptual integrity the only way to do that is by effective communication across teams and within teams sometimes we may also need to do cross-disciplinary collaboration you know with people from other domains like for example if you are building a software for a domain in which you do not have expertise in that case you have domain experts with whom also we need to collaborate in order to build the software with the functionality that is useful to The Domain experts so communication is an important aspect in any software project it shapes how the software products is built and it also ensures that we deliver what the value to the users now reflect on how you went about building the course projects you know you worked in teams and if you think about it you will find that the modules in which you communicate it well with your other team members most likely those modules were built well and performed as per the functionality requirements when you did not communicate so much and made assumptions of your own of what might be required you might have found that oh I have built something and something else was required so most likely this communication the more you are able to communicate effectively and clearly with the rest of the team the more likely is that the software is built on time and as required so continuing along the same lines one important thing to keep in mind regarding communication is to have an open mind so often we get attached to our own ideas if we think that ok a certain piece of code has to be built in a certain way we get attached to the idea of building it in that way and irrespective of whether that actually achieves a functionality or not so when we are communicating and we are working collaborating across disciplines you know where you have other types of domain experts involved let us say mechanical engineers and electrical engineers and you know artists and so on in order to build the software this collaboration requires this open-mindedness about the inputs from others we also need to be able to inform them about code related constraints because sometimes the user may say that ask for a functionality which the code or the programming does not support so what does that imply that implies that the marketing and sales teams also need to be aware of what are the capabilities of the software what can be done and what cannot be done so one very important thing to keep in mind here is that these teams should not promise features to the client which the development team has no way of building or will be very expensive to build so marketing and sales teams need to also interact with the development team in order to get a good idea of what can be done and what cannot be done so here's a reflection spot how do you think software Engineers communicate with each other and across teams can you think of some tools that you may have heard of for this purpose so how do software Engineers communicate with each other well they communicate with each other in different ways the simplest being you know just going over to their colleague's desk talk to them email them or chat via different messaging platforms or social media and one of the main reasons why software Engineers communicate is to get information get information about the requirements about the code right and some of this information is easier to find than others so for example where is a particular function in the code an ID can help them find that out right whereas sometimes they need to understand why a particular line of code or function was written right and this would require them to go to the person who wrote that code and ask them now there are types of tools which are known as knowledge sharing tools and there are various such tools which companies use the purpose of knowledge sharing tools is to share documents and archive decisions the reason being waiting for replies from other people who are slower than just looking something up right so let's say I need to know some information about why a particular function was written I can very well email the developer who wrote it or talk to them but there are bottlenecks right it will take time for them to reply or maybe the developer might not be currently available this is where knowledge sharing tools can help us document and archive all of these important decisions so what are different knowledge sharing tools one of them is an issue tracker right and we saw tools like jira pivotal tracker that track different issues different user stories different requirements and also the history of those who worked on those issues second GitHub and GitHub pages are also useful knowledge sharing tool so if you are using other libraries and these libraries have GitHub Pages which has documentation right so websites like GitHub are also important knowledge sharing tools another important tool for communication is slack right in slack you can create channels for specific purposes as well as communicate with specific team members and of course all of you must be familiar with stack overflow so if you are facing certain issues we usually go to stack Overflow and see how others have resolved that particular issue and websites like stack Overflow also provide additional links for learning resources as well you so you might ask so why is it important to document all the important decisions and information regarding a software project so what can go wrong if I don't do it well there are several reasons one is that I might require this knowledge in another project right and so it was useful if it is documented and archived properly foreign having some important information or who developed a particular module has left the organization and thus this specialized knowledge goes along with them so when such people who have specialized knowledge they live in the middle of development no one else can take their place and this hamper's progress so how can we mitigate this so this can be mitigated by rotating developers between projects and cross training them to ensure that the necessary knowledge to maintain a project is distributed across multiple engineers now let us look at productivity in terms of software engineering what does productivity mean when it comes to software engineering and how can we be more productive so what is the traditional definition of productivity its basically how much work you are able to get done in a given amount of time now what is this work right so quantifying this work in the software engineering case is not simply the number of lines of code that you have been able to write right because we are finally working together in order to build a system which is a collaborative effort so in this case you know if you delivered the features that were assigned to you but you ignored all the other requirements or you did not interact with other members you know or even clarify doubts about the modules that you have created now that while it may be very efficient for one person it harms the productivity of the entire team so the question is what are ways in which we can become more productive as software engineers so software Engineers can be productive by using the right tools so we saw throughout the course how using the right tools can speed up as well as help create effective software so we looked at project management tools right tools like jira pivotal tracker so these tools enable all members of the team to get a big picture of the software project as well as a detailed view of the progress of the project and then there are development tools like IDs and features and Ides help developers become more productive so do tools alone Define productivity no productivity is not just about using the right set of tools right on a typical work day software Engineers may have to attend meetings answer emails and encounter other non-work activities right sometimes we may think of these as distractions no I just want to code but I am being dragged into meetings or I am being able to ask to do talk to a client and so on and so forth so these interruptions can be viewed negatively from a individual or a narrow perspective but these meetings are important in order to enable everyone to have that shared vision of what is it that we are trying to build and to make sure that we are building what the client has asked for so to summarize communication is a key aspect of ensuring that the team remains productive so don't underestimate the importance of talking or communicating now you may communicate in various ways you may communicate by stopping by your colleague's desk or you may communicate through text or you may communicate through email or whatever but what is important to keep in mind is that the communications need to be precise and unambiguous so in that case the other person and you have the same understanding of what is to be done