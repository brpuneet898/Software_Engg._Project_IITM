we looked at the various aspects of object oriented design and now in this video we will look at how we can represent these aspects of a design and this is known as software modeling so software modeling is a way of creating an external explicit representation of the system which you want to build and in this video we will be looking at unified modeling language or uml diagrams so uml diagrams help us represent the software design via multiple views for example a user's view or a functional view or a behavioral view we will look at what these different views are and at a greater level of detail as well so let's look at what these different types of views are so there are many views but in this video we'll be looking at two important views one is the structural View and the other is the dynamic behavioral View so what is the structural View so the structural view it defines the structure of the software system and the relationship between these structures are components so the structural view it does not describe the time dependent behavior of the system but it describes the different logical parts of the system the classes the data the function all of this is represented in the structural View so the most commonly used structural view diagram is a class diagram right the class diagram in uml is a type of a static diagram which describes the structure of the system by showing the systems classes their attributes their operations or the methods and the relationship among these different objects so let's look at an example so let's look at a part of a class diagram for the seller put right so the class diagram is the main building block of object oriented modeling so here we can see that these boxes they represent the classes and each of these boxes are divided into three compartments so the top compartment it contains the name of the class so for example product is the name of this class and the middle compartment it contains the attributes of the class the data attributes so for example product ID product name product type product cost all of these are attributes of the class product and the bottom compartment it contains the operations that the plus can execute so for example the product class can has a member function known as ADD product so you can add a product base and assign its ID name type and cost you can delete the product by its product ID and so on so each of these classes they contain data members and functions which are necessary to realize the behavior of the seller put so here you can also see that the product and the catalog classes have a composition relationship right so we see that a group of products are composed to form a catalog and similarly here you can see that clothing and book are classes but they inherit data members and methods from the base class that is a product so what does this mean so clothing is a specialized type of product and it contains attributes like product ID name type and cost but in addition to that it contains specialized attributes like size and color now that we have seen what the structural view is let us look at another important view which is the dynamic behavioral review so these views they describe the behavior of the system over time and there are different types of views so one is known as the state machine view Which models different states of an object of a class another type of view is the activity View it models the flow of control among different activities or for a particular workflow so how is the workflow done or what are different steps for a particular activity that can be modeled using the activity View and then we have the interaction view which describes the sequence of message exchanges right among parts of a given system so it gives a holistic view of the behavior in a system by showing the flow of control across different objects so in this video we'll be looking at the interaction view in little more detail so an important type of interaction view is the sequence diagram so the behaviors corresponding to the requirements or the user stories can be implemented using the sequence diagram so the diagram on this slide it represents the sequence diagram for a particular Behavior which is adding a seller for the port so the classes from the class diagram are represented at the top by these boxes so you see that there is a seller object and there are other objects like controller UI screen and the user right and they have each of these objects have parallel vertical lines which are known as lifelines and these horizontal arrows are messages which are exchanged between different objects in the order that they occur so for example the first the user enters the seller details and then a particular function called add seller is called right so these messages can be functions from the class diagram such as ADD seller and these sequence of messages they correspond to the implementation of a given requirement or sub requirement or a user store so this is the sequence diagram for a particular behavior for a particular user story so similarly sequence diagrams can be constructed to model other requirements other user stories as well so there are several uml diagrams right and they can be used to model a given software design using different views or different at different levels of granular granularity so we will not be looking at all of them right and during the software design process a subset of these uml diagrams are used to create the design model so in this course we will be focusing mainly on the class and the sequence diagram as they are the most commonly used diagrams in the design process and details of various other uml diagrams can be found in the extra resources provided in this week so now that we have seen the different types of uml diagrams now let's reflect on the purpose of these uml diagrams right so what are different purposes for which uml modeling is used we saw that it is used to represent the high level design of the system but what purposes does it serve you can pause the video here and think of different purposes before proceeding so one important purpose of modeling is it serves as a vehicle for communication and idea generation right and this is one of the most common uses of uml diagrams so when we want to discuss the key ideas of the software with other members of the team these high level uml models or such class diagrams sequence diagrams can be used and all details won't be specified and might not and it's most likely not needed at the start right but the key ideas like the class names some of the attributes what are the relationships all these can be specified and these diagrams they facilitate collaboration and discussion with other members in the team so for example other team members they can maybe add more classes change the relationship between classes Etc and this can help in improving the design another purpose of modeling is that it guides the development of software right the ideas from the initial uml models can be detailed out even further and then this model can guide the actual development coding of the given Software System so maybe we can start off with basic classes then add relevant data attributes and as we progress towards development more attributes and member functions can be added so another purpose of modeling is to create models such that there is a close correspondence with the implementation or the code so for example every class in a model can map onto one or more classes in the implementation code and in fact there are even softwares which and tools which generate code from such detailed uml diagrams so here you can see that the uml diagram is on the left and based on the structure of this class diagram the appropriate or the corresponding code is generated and there are tools which do this as well so we saw what are the purposes of uml diagrams right and in this course we will be using uml diagrams mainly to communicate with team members about the design and also maybe to help you get started with software development now the key thing to remember is that you should not get too bogged down by the details by the wide variety of diagrams and by the notation right instead you should use uml diagrams as a thought tool a tool which will help you think about the design and help you reason and engage with your design