we looked at ways in which we can estimate the time and effort required to execute a project so having these estimations in place another important part of project management is to create a schedule for the project so why is this creating the schedule important the schedule can help the project manager monitor the timely completion of each task and let's say if we are falling behind we can also take corrective action and this enables the entire team to move forward so now let's reflect on this question of how do you actually go about creating a schedule right so what are the main activities involved in Project scheduling can you think of some of these activities you can pause the video and think about some activities before proceeding okay so let's look at some of these activities right so one is we have to identify all the major activities which need to be carried out to complete the software project and once we have done that we have to break down each of these activities into smaller tasks and some of these tasks may be dependent on each another right so we have to determine the dependencies among these different tasks so for example task B can start only after task a has been completed or let's say task b c d can happen in parallel so such dependencies have to be determined and then we have to also estimate the time duration for each of these Stars and having this dependencies and time duration now we have to represent this information so that all members in the team will be aware of these dependencies and time durations and we'll be looking at some representations in this video then we go more concrete and start you know we think about the start dates the end dates for each of these tasks and then what we do is we determine the critical path so a critical path is a chain of tasks that determine the duration of the project so we'll be looking at what a critical path is and finally we allocate resources people or equipment or other things to these particular tasks so now let's look at how we can identify and break down each activity into tasks so one way to do it is to create what is known as a work breakdown structure or a WS what it does it it breaks down the project activities into a set of tasks and usually this is done by creating a tree like structure so the root will have the project name and each node is broken down into smaller activities which are the children of the node and then finally you come down to the leaf right and each Leaf it represents a task which can be allocated to a developer and which can be scheduled and each task takes roughly two weeks to develop of development time so let's look at a work breakdown structure for the Amazon Seller portal right so this is the name of the project which is the root and then you have different nodes uh for let's say requirement gathering for design for development and each of the leaf as we as we saw earlier it represents a task which can be allocated to a developer right and so for example some some people will start working on the component diagram others will start working on the database schema right and if we look at just the design and the development right so we can see that in the design you create the component diagram the database the user interface and the development involves all the modules or the requirements which we identified in previous videos so now that we know what these different tasks are now what we have to do is to create what is known as an activity Network which is nothing but now that we know what are the different tasks now we have to determine interdependencies how are these different tasks dependent on each other what are the estimated durations how much time will it take so all this can be done by creating what is known as an activity Network and the leaf nodes of the work breakdown structure which we saw earlier these becomes the nodes of the activity Network so let's look at one example the same example so this was the WBS or the work breakdown structure which we created now all of these Leaf nodes become part of the activity Network so this is one example and here you can see the arrows also determine the dependencies right so if you see the catalog management which is part of the development that can start only after you create the component diagram the user interface and the database schema right and so this graph like structure it determines the dependencies between different tasks and it also tells us how much day how much time or how many days are required for each task so here you can see that catalog management has to be completed before Inventory management management can start and order tracking can start only after Inventory management is completed but then we see that payment tracking sales tracking and customer feedback can happen in parallel right so this is one example of an activity Network so another way to represent this information is to create what is known as a Gantt chart so Gantt chart is a special type of bar chart and you can see that each bar it represents an activity or a task and the length of each bar is proportional to the time duration plan for that activity so in the case of the Amazon Seller portal we saw that the user interface and database schema can start together parallely right user interface takes longer than the database schema here we see that these three modules the catalog management Inventory management and tracking can happen only one after the other but once order tracking is done payment and sales and customer feedback all can happen in pair right so this representations provide the software manager as well as all the members of a team of the team A visual representation of how the project is scheduled and what are the different tasks which need to be done so to summarize in this video we looked at the main activities in scheduling first we need to identify all the major activities and break down of these activities into tasks which can be done by the work breakdown structure and then we saw the activity Network representation which can help us determine the dependencies and the time durations and representations like the Gantt chart can help us represent all of this information so that all members in the team will be aware of the schedule of the project now the next important type of project estimation techniques is known as heuristic techniques so in heuristic techniques we provide estimations by doing some modeling using some suitable mathematical expressions so a popular model which has been used to estimate effort is known as the constructive cost estimation model or the Kokomo model this model was proposed by bohem in 1981. and the formula which is used to estimate effort is effort is nothing but a multiplied by size raised to B where size is the size of the project in kilo lines of code and what are what is this A and B right so a the values of A and B it depends on the type of project or the type of software you are building so bohem he classified projects as one organic so an organic project involves building a very well understood application program and uh the size of the team is also small and all most of them are experienced another type of project can be a semi-detached project which has a mix of both experienced and inexperienced people and they might have some limited experience building related systems and the third type of project is an embedded project where it the project is strongly coupled with hardware and the team size also might be large and there might be many inexperienced people So based on the type of project there we assign different values for A and B and what you have seen is that the effort it not only depends on the size of the project but also the type of project the composition of the team is also an important factor in which the estimate depends on foreign empirical analysis of several projects Bowen came up with these values for a and b for each of the types of projects so you can see that the values of the constants of A and B they are based on the type of project right and for organic projects the values are the least it's 2.4 and 1.05 and it is highest for embedded projects and this makes sense because embedded projects as we saw it involves coupling with Hardware the team is large you know there might be many inexperienced people and because of this effort increases exponentially as the complexity of the project and the team increases So based on these constants the initial estimate or the nominal estimate is calculated in terms of the effort now let's take the example of the Amazon Seller portal and try to come up with the initial estimated effort to build such a system right the first thing which we need to identify is what type of system is this Amazon Seller portal right so according to me this is not a straightforward Software System there are several modules which have to interface with the main Amazon system with the banks for payment Etc so I would maybe classify it as a semi-detached system in some cases it can also be an embedded system right so now that we have identified what type of system it is now let us try to second thing to do is to estimate the number of lines of code so recall that we had identified some requirements in the previous weeks so we have adding editing deleting catalog the inventory tracking orders payments sales customer feedback so all of these things are there and for each of these modules I estimate the number of lines of code required so how how does one do it right so this itself is a very difficult task and usually the project manager looks at data from previous projects to come up with these estimates so for example in a previous project there would have been a module which captured customer feedback and based on that the software manager makes estimates for that module so I add up all the lines of codes for all the module and I get the total of 4000 lines of code which is nothing but four kilo lines of code so now let's look at uh the the estimations which we have till now we we know that the system is semi detached we have the size in kilo lines of code we plug these values in and we get the effort is roughly around 16 percent months or 15.83 percent person months so what does this mean this is our initial estimate right so we require around 15.83 percent months that is around 16 people working full time can finish this project in one month and based on this we can estimate the cost right so let's say that the average salary of the 16 people is 75 000 per month so then the total cost comes up to around 12 lakhs so now apart from the size of the code you know we need to consider other factors also to estimate the effort required for a project right so let's reflect on this so what are the other factors which have to be considered to estimate the effort required for a project you can pause this video and think about some other factors before proceeding okay so apart from the size of the project so what other factors have to be considered let's look at that so some of you might have said about the people working in the project right some team members maybe experienced but not in the programming framework required for this project others may not have domain experience so in this case in the case of the Amazon Seller portal you know how an e-commerce application works and hence some time we'll go in learning about the domain so another Factor can be the technical attributes or the finer details about the product so is the database large is it complex how complicated is the entire product so is reliability an important part of the system so these factors also have to be considered when we estimate the effort and estimation also depends on the tools and practices which are used by the team right uh how if the practices and tools are not very effective then maybe more effort is required for the project so in the Kokomo model after determining this initial estimate some other factors are added in order to obtain the final estimate and these factors are known as cost drivers right so this table shows 15 such cost drivers and these attributes like the product computer attributes personal attributes these are similar to what we discussed earlier right like software reliability so if the reliability required is very high then we we have a higher cost driver compared to when it is very low Okay so let's look at our example so let's say we want to estimate the effort for the Amazon Seller portal uh let's look at some of these attributes so for example we want the system to be highly reliable because orders and money are involved right so we will choose a cost driver which is very high for reliability and maybe my database size it is also quite large so I will choose uh a cost driver which is high now if we look at some Personnel attributes uh let's say my application experience of my team is low right so I will choose this as 1.13 Which is higher than when if it is very high and let's say my team has good programming language experience so I rate it as high right so multiplying so the multiplying factor for all 15 cost drivers they are multiplied to get the effort adjustment Factor right so in this case I'm just taking four drivers for Simplicity so let's recall that our initial estimate was 15.83 percent month now I take these cost drivers multiply all of them together and this gives me the effort adjustment Factor which is 1.62 and now my final estimate is calculated by multiplying the initial estimate with this effort adjustment Factor and so I get an estimate final estimate of 25.65 percent months so to summarize the Kokomo model first we determine the type of product which has to be built then we estimate the number of lines of code for each module and based on the formula we get the initial estimate and from this initial estimate we calculate the effort adjustment Factor by considering the 15 cost drivers and then we multiply the initial estimate with this adjustment factors to get the overall estimate so if you look have if you have noticed one important thing to note is that the overall estimate it depends on the estimation of the lines of code for each module right and so it is important to get as much detail about the software and we should also be aware of our biases when estimating the size of various components so to summarize in this video we looked at several estimation techniques both empirical and heuristic and another question now to ask is which technique to use right for a particular project so what estimation techniques project managers use it depends on various factors like the type of organization the type of product which which is being built right and it depends on the practices in your organization as well so for example uh the British computer Society survey of more than thousand projects found that 92 percent of the project managers they made their estimates using experience instead of formulas so now that we have learned these estimation techniques you will encounter these or maybe some variations of these as you start working in the software industry