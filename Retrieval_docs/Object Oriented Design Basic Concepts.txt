we looked at characteristics of a good design and we said that a good design is modular and by this we saw that a good design has high cohesion and low coupling the upcoming videos we will now look at how we can represent these designs or these modules using appropriate representations so what does a module consist of and how can we capture the relationship between modules will be the focus of the upcoming videos foreign ways of looking at a design so in this course we will be following an object oriented design approach so let us look at the basic concepts in an object oriented design perspective so as the name suggests the key building blocks of a design in this approach are objects right and we imagine the working of a software in terms of interacting objects right and objects they usually represent a tangible real world entity so objects in the real world they interact with each other to get the job done so let's take an example of a supermarket right so consider you have to buy a set of things from a supermarket so let's reflect on this for a moment so what are the key objects you interact with to buy something from a supermarket you can pause this video and think about the key objects you interact with before proceeding so what are the key objects you interact with one is you go to the market to buy some things right so these are nothing but the products they can be food items clothing Etc these are tangible objects and after you decide what all to buy you place them on a shopping cart or a shopping bag so this is also an object then you go to the cashier and he or she creates an order which is a list of products as well as a total bill and then you make a payment this payment can either be in cash or through a credit card or a debit card so these are also tangible objects so similarly in software systems we create objects which represent real world tangible entities so now what does an object contain right so an object it contains data right which is usually private or visible only to that particular object as well as methods which are set of functions that operate on the data and are these methods are usually visible to other objects as well now a key idea in objects is that they follow encapsulation so the data as well as the methods are bundled together or encapsulated together and generally data is hidden from other objects and it can only be accessed by the methods of that object right so no object can directly access the data of other objects so each object can be thought of hiding its internal data from other objects right and this is a very important principle and it is known as data hiding or abstraction an encapsulation ensures data hiding and data abstraction right and advantage of decomposing the system into objects and doing this data abstraction is that it divides the system into parts right which have low coupling and high cohesion so how does it Ensure High cohesion so data variables and related methods all are encapsulated together so they are within a particular module right and hence they have high cohesion and the interaction between different objects are minimized because of this because all the related methods and data variables are present in a particular object and hence these modules have low coupling as well so let's take an example of a product object right it will have private data members like name name of the product type of a product be the size the color Dimensions cost Etc and there are various operations which we can do on the product object for example we can add products we can edit particular products details we can delete a product and so on so now that we have seen what objects are another key term or Concept in object oriented designs is a class right so what is a class so class is nothing but a template by which we can create objects right and all objects possessing similar attributes and methods they constitute a class so for example electronic items clothes food items right they are all objects of the type product right and all these classes can be related to other classes in several ways right so let's reflect on this point of how can classes be related to each other or what are ways in which different classes can be related to each other so you can pause this video here and write down your responses before proceeding so one type of relationship between classes is Association and by this we mean that different classes they take each other's help to perform some functions so objects of one class they invoke the methods of the corresponding object of another class so for example we have seen this before in if the seller wants to view the his or her inventory the seller object calls the view inventory method by passing the seller ID right and here we see that the seller module and the inventory module or the seller class and the inventory class they are related to each other another type of relationship is composition right and as the name suggests it represents a whole part relationship right one class is a part of another right and objects which contain other objects and these are known as composite objects so for example a catalog has a list of several products right so in the seller portal a catalog will contain a set of products right and it is represented in this manner here you can see that products is a set of products they constitute a single catalog another type of relationship is inheritance right so using inheritance you can define a new class by extending the features of an existing class so the original class is known as the base class and the derived class or the new class is known as the derived class so for example instead of having a single class known as product we can divide this into several subclasses like Electronics books clothing Etc right so Electronics is a special type of product books is a special type of the product and it is represented in this manner so for example product is the base class it can contain common attributes like the name the type the cost Etc but books can be a subclass or a derived class which contains additional attributes or additional features like name of the author the publisher number of pages Etc so it is a specialized kind of product another type of relationship between classes is dependency right so what does this mean so if we let's say we have a class B which depends on Class A and if any changes are made to class A then changes have to be made to class B as well right and a common example is interfaces right so let's say we have an interface a and Class B implements this interface and this is a very common feature in object oriented programming languages like Java right you have an interface and a class implements that interface now if this interface a is changed then appropriate changes have to be made in the class B as well right so this type of relationship is known as a dependency relationship so let's say you have these different classes and you want to start identifying relationship between the different parts right so how do you do that so how do you identify class relationships so for each type of relationship there are ways in which you can decide which type of relationship the classes have so Association kind of relationship it means that a delegates something to b or a needs help from B so then we know that A and B can be related to each other using an association for composition or aggregation if B is a part of a or let's say if a contains B then we know that A and B have a composition or aggregation relationship or even if a is a collection of B's right and third for inheritance we say that if a is a kind of b or let's say a is a specialization of B then A and B are related via inheritance so to summarize right the past few videos in the previous videos we looked at what do do we mean by Design right and design or software design is a way of organizing the code you will Implement and providing a structure to the software system and we also discussed what is the outcome of the design process right it is the different modules which are required and the relationships among these modules so now we have a vocabulary to talk about the different modules and how these different modules can be related or what is the relationship between these different modules now an important aspect to consider is how do we communicate this design to other members of the team and sometimes even to the clients right and this is important right and this can be done by creating a model of the system to be built right and in the next video we will look at how we can effectively represent these kind of designs so that it can be communicated easily to other members in the team and even to the clients we will be using a popular modeling language known as uml or unified modeling languages to represent the given design