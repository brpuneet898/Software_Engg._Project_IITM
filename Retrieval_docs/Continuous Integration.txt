videos of this week we looked at deployment environments and different strategies for deploying our application right and now these topics would have given you an idea of how important and time consuming deployment actually is right because we have to ensure that the code which is built by multiple people it is integrated together it is tested sufficiently and it is correctly deployed to the live environment right without any bugs or defects and all of this can be time consuming so in this video we are going to look at a concept which is known as continuous integration and what is continuous integration it is a way of automating the integration and the deployment process of software applications so let's see how it works right so we have the Version Control System right it takes care of the different versions of our software right and we saw what a staging and a deployment server are and in this video we look at water what a continuous integration server is right so now let's look at the content continuous integration process right so it starts off with developers writing code and testing it and finally they commit the code to the Version Control System right and what happens when after each individual comment The Continuous integration system or the server pulls this new code right and it builds and tests the code on the continuous integration server right it runs unit an integration test and it checks for errors and all of this is done automatically and if there are no errors then it sends a message to the deployment or the staging server that it is ready to deploy right and now the deployment server it pulls code from the Version Control System right and it does one more round of building testing and finally it deploys it and then it notifies The Continuous integration server that the deployment is complete so in this way we see that most of the building testing deployment integration all of this can be over automated by using scripts and by using the continuous integration server foreign so now that we have seen what the continuous integration process is there are some best practices which we can use so that the Ci or the continuous integration process is carried out efficiently and smoothly so let's look at these best practices so the first thing is that it is essential that you maintain a single Source repository right so you maintain a main line or a master branch and most people should work on this Branch most of the time of course you can have few branches for testing new features for bug fixing Etc but most of the people should ideally work in the master Branch at all times the next thing is that it is imperative that you automate the build right so what does a build involve right so when you're building your code it involves compilation it involves copying and moving the files creating database schemas right and most of these can be automated using build tools right for example in Java you have ant and Gradle and node.js has a build tool known as Builder so all of these tools can can help you automate the entire building process right it's just that you have to write some scripts with the correct configurations and these tools will help you automate the entire build foreign should you automate the build but you should make the build self-testing as well right now what does this mean this means that you you can create automated tests right that can check a large part of the code base for bugs right and let's say when a test fails right the notification should directly be sent to the developer responsible for that module right so simple command should just start running the test suit and appropriate notification should be sent to the responsible developer when when any test fails another important practice is committing to the main branch every day right so how do developers commit or are they they write code they write tests they build and they check if there are any errors or not and then they commit right and sometimes they check for conflict errors also they need to check for conflict errors as well right so errors which can occur when others have already modified parts of the code which you have modified right now the problem is if you don't commit frequently there are chances of more conflict errors right and hence frequent comments they encourage developers to break down their work into very small chunks right so this is the reason why it is essential that you commit to the main branch every day now another important practice is that every each and every commit should automatically build the main branch on the integration server right so as we saw the continuous integration server it monitors the repository right so let's say every time a commit happens the CI server should pull the new code right and build and do the integration testing right and should notify the developer who committed the code if everything is working correctly or not right so if all the builds build all the test pass then great right the build is successful okay so hence it is important to have a continuous integration server right and an example of this is Jenkins and cruise control so this image is an example taken from cruise control where it shows us a list of builds which have happened right and also the builds which are passed and which have failed right for how much duration the time right who has done the modifications and so on now let's say if our build breaks right if there are some errors right another important practice is that these broken builds have to be fixed immediately right and it should be a priority of the developers to fix broken bids and another thing is that we have to revert uh take the system back to the last known good build right so that other other developers who are working on the system can access the correct code base right this error is not does not percolate to their code as well right so it's important that we roll back the system to the last known good build and finally it is important that you automate the deployment process right the right scripts which will automate the deployment as well maybe deployment to the staging environment so this ensures that the latest code is always available in the staging environment now that we have seen what the best practices for continuous integration are Learners let's reflect on this question of what are the benefits of using continuous integration maybe for the end users for Developers for the organization can you think of what the benefits are you can pause this video and think about the responses before proceeding so what are the benefits of continuous integration so one is that it reduces deployment time right so since most of the deployment the building testing is automated there are scripts there is the integration server which does all of these things the it minimizes the steps that require human intervention right and in a way it reduces the deployment type now second benefit is that it avoids this last minute rush right at release dates so let's say a release date is coming up right where the team has to show some new feature to the client and the developers have not committed their code in let's say weeks or even months right and all of a sudden close to the deadline they start committing their code now do you see what problems will arise right there will be several conflicts right because the developers are writing their code and it's very likely that they will have conflicts because they have not committed frequently right and hence when you follow the process of continuous integration developers are encouraged and even mandated to commit to the main branch every day right and this helps in reducing conflicts as well third is that it is beneficial to end users as well right so let's say they want to see an initial prototype or let's say the sales or the management team wants to show a demo of the tool right and what all that they have to do is run it from the staging server because the continuous integration server will will tell the staging server to build the code right so you will always have an updated copy of the software system in one of the servers right so you can always see an initial prototype and it's available to different teams as well and it's beneficial for developers as well right so since they are committing their code frequently it helps developers to create more efficient more modular code they write code in small pieces and commit right so this is beneficial for developers as well so one drawback of the continuous integration process is that there is the initial effort right to required to set up processes to train people to set up the integration server all of this takes time right but in most cases the advantages it far outweighs the drawbacks so in this video we looked at the continuous integration process right and we looked at several best practices which are needed or which are essential for continuous integration to work well