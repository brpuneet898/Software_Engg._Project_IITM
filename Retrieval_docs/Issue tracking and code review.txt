so in the last video we discussed about Version Control Systems and focusing on get and some introduction to GitHub this video will talk about issue tracking and code review and the focus of uh will be issue tracking and code review through GitHub so what is issue tracking an issue is reported by developer or tester or user when they encounter it so this issues needs to be saved and tracked till they are fixed because we want our system to be bug free so this is where issue taking systems play a role so issue tracking systems are tools that helps in managing and tracking all the issues repeated in your software development projects so why is this important because you want to deliver high quality products to the end user by tracking and minimizing the issues in your software using this will reduce the cost of development by prioritizing issues and focus on important and frequent use cases so in a large software uh setup there will be hundreds and thousands of uh issues reported not all of the issues will be based on the important use cases there will be some Corner use cases that users may not use frequently so the team will need to prioritize on which issues to fix because all the issues cannot be fixed in the given time foreign it also helps in keeping history of the previously reported issues and details about it so if you see the history you would know what issues were reported so this may help the testing path you you may want to test the the previously reported issues against the fixed versions you may get help if similar issues were reported earlier and how were they fixed so through the systems you provide better service and satisfaction to customers because now they have a way for them to report and they can track those issues the progress of the fix so obviously they increase the efficiency and communication within team by providing a means to report and take issues efficiently now let's see how we can do issue tracking in GitHub so you can create a issue on GitHub from your repository home page there is a button to create it you can see the image new issue now after that after clicking new issue enter the details so for in this example this is very simple example the issue is named as issue one the description mentions that this issue there is a sum issue in uh login the button is not enabled after entering the username and password so users cannot login the issue is saved after it is reported so what are the features that an issue stacking system should have once the issue is reported other developers in the team should be able to see those issues they should be able to comment on the issues if they know some details about the issue if they already know what causes this issue or if they have seen similar issue you should be able to assign the issue to some developer if you want their attention you should be able to tag someone in the comments for their attention if you want to reply from them so on GitHub if you assign a developer to some issue an automatic automated email is sent to them you can configure these settings on GitHub but the default setting is an email notification is sent you can set labels on the issue as we have seen here there are yeah so there are ways to set labels on the issue these labels can be used to filter the issues and list issues only that you want to focus on when you accumulate a lot of issues you can create a branch or pull request to map an issue to the pull request you can map more than one issues to a branch or vice versa that is also possible so now how these things will help we'll see now so the issue tracking features are available here this is the labels that I was talking about you can set labels here also see that so C this issue was assigned to a developer the developer commented something that this issue is debugged and blah blah blah and this will be fixed by Friday now anybody who visits this issue page they will know that this issue will be fixed by Friday and they don't need to worry about it or somebody is working so that not so that only one person is working on this issue just on the right side bottom you can see there's an option to create a branch for this issue you can create a branch to fix this issue from here itself or there is another way from the branches type you can create a branch so the issue tracking system here in GitHub provides you a tab known as issues there you can list all the issues you can list be issues based on filters for example you want to list only open issues you want to list only closed issues you want to search some history or all issues assigned to a person or anything else now let's see how we create a pull request to fix the issue we have seen that through this option if you create a branch from the issue page itself it will be automatically linked to the issue so suppose you create a branch using this option after creating the branch you do all the stuff that we discussed in the last lecture you make the changes commit and everything [Music] after that you create after making the changes you want to create a pull request that we will see later first let's uh see that where you will find another way to create the branches you can find that in the branches tab under the code tab okay so now let's come back to the last point that you have made the changes and you have committed your changes now you want to create a full request for this change so what is a pull request pull request is uh a set or it is a set of changes that you can that other developers can see so full request helps in getting the changes reviewed approved and attaching it to an issue so option to create pull request is available on the branch page itself as shown in the top image use that option to create the pull request this pull request will be automatically linked to the issue through branch as discussed if the branch was created from the issue page if you created it from the branch page then you still you can map the pull request to an issue using the option in the image at the right side now as we said that pull request helps us in code reviewing so let's first talk about what is code reviewing so code review is a software quality assurance practice in which one or more people examine the program or changes done by a developer it's not necessarily that only others can review the code the developer himself can review the code but the practices that it should be reviewed by other developers also so the handset is also referred as peer review because other peers are involved in the review so will request give you a page where you can see the diff that is the changes that are made for this fix and the code changes can be reviewed then the code reviewing is not limited to examining logical errors only but it also helps in examining that the code is well documented it adhers to the best practices in consistent with the standards of the project or team so there are several developers working on the same project if everybody writes code with their own way the main it hurts the maintainability of the code it would be difficult to debug any issues that may arise that may be reported in future hence code reviewing if done correctly results in better quality and maintainability of the code so why is code really important it's obvious that it improves code quality because the focus here is not just on the correctness but as we have said it also the reviewer also checks the aspects like efficiency complexity and security and those can be discussed and fixed it minimizes technical depth so if the code is well documented then its maintenance is easier it also reduces the risk how because testing cannot guarantee a software to be completely bug free so there are some errors that can be spotted during code review that may not be caught during testing and in turn it actually helps the keyword testing tasks easier because you have minimized the risk beforehand before testing itself it also supports knowledge transfers because more than one people are involved in code reviewing so team members learns from each other's expertise so there is a concept uh that is getting popular slowly known as pair programming in this this is an agile software development technique in which two programmers work together at the same Workstation so one of the programmer will write the code and the other one will review the code simultaneously and these programmers will search the roles frequently but there are also critics of this technique and hence it is not very widely used but there are organizations that support it and it's getting popular now let's see how code reviewing can be done on GitHub we have seen that we created a pull request okay after that in the on the pull request page there is a tab known as file changed click on that and you will see all the changes to the files that are done through this branch now these changes can be seen by whoever is reviewing the code after reviewing the code the reviewer can add their comments on specific line numbers also and otherwise also so after everything all the comments are addressed and the reviewer things that the changes are good to go they can mark the changes as approved you will see the option of approved in the review changes button here after reviewing is done the there is a button on pull request yourself to merge the changes to the source branch so this is the the picture shows how you can merge the changes to the source Branch so after you have merged the changes to the source branch the fix is complete either you can choose to read the branch or you can choose to keep it the issue mapped to this pull request is automatically close you can observe that but if you want to see the closed issue we have already seen that you can see from the issues tag so that is it on GitHub issue tracking and code reviewing