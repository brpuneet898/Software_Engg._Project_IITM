phases in the software development life cycle right starting from the requirements and we looked at how we can design our Software System what are various development tools like Frameworks IDs debugging tools code analysis tools and then we also looked at testing right how we can test our application and we looked at different levels of testing starting from unit test to testing the entire Software System now the focus of this week is to understand how we can deploy and monitor our Software System so what do we mean by deployment so deployment means that the software system which we have built it has to be easily accessible to users of the system all right so let's say you're building a web application and this has to be hosted on a server somewhere which the end users can access via URL right so in this week we'll look at ways in which we can deploy a software application we will also look at monitoring so what do we mean by monitoring so how we can capture and analyze the applications execution information right so how are users using it you know there might be some performance issues there might be other errors timeouts Etc and hence monitoring is necessary once our system has been deployed so now how do we go about deploying our Software System right so before we look at what are the different ways in which we can deploy our system we need to understand that the software is executed right in what is known as an environment right so what is an environment an environment is a system or maybe a set of systems that execute a given software application right so as developers we write code we test the code and finally the this environment builds the code right creates an executable right which users and other people can access so what are these different environments so there are different types of environments we will look at what is a development environment then there is a testing environment a staging environment and a production environment so whenever a team develops or writes code usually these type of environments are available all need not be available but at least the development testing and production are usually available when we write or when we build system software systems foreign so let's look at these types of environments in detail right so what is the development environment the development environment is nothing but the local environment of a software developer right the software developer writes his or her code in the development environment in their local machine right which can contain an IDE and other tools which the individual developer uses right so in the development environment the individual user writes his or her code then tests it and then builds the entire code base to check if the system is compiling and working right and then what they do is then they commit this code to the shared code base right it might be a version control system which which maintains this code base and this code base is known as the main line or the master the master branch right and the developers code base is known as the working copy right and once and once a developer commits his or her code right they also need to check whether my working copy does not Clash or the if there are if there aren't any conflicts with the code base of other Developers right and if there are some clashes or conflicts then these have to be fixed and also the development environment is connected to the local database right so you can access the database or you can read and write to the database without worrying how it will affect the real data in the software right so the real Software System might be deployed somewhere else but you are testing or writing code which access the local database so this was regarding the development environment right so now that you have written your code you have done unit testing and the code in the code repository is then placed in what is known as a testing environment right so what is the testing environment it is in this testing environment where integration testing and system testing is done right so if some tests fail right the code with the defect is removed from the test environment and the appropriate module in which the failure has occurred is identified and not only that the person concerned with developing that module is identified and notified right and also what is done is the code is rolled back to the previous working version right and the developer responsible for that module fix fixes the code in his or her own working copy and then commits it to the shared code base right and so the error is fixed and then it is sent to the testing environment in the next schedule deployment so this was regarding the testing environment so now that our code is has been tested thoroughly can be deployed to a server and release it to users well this environment the actual environment where users will access our Software System that is known as the production environment right and usually before sending it or deploying it to the production environment the code is deployed into what is known as the staging environment right and this staging environment is known as a pre-production environment and it exactly resembles the production environment right in terms of Hardware software configurations all of that right and it runs on a remote machine right not on a local system in the network in which the development team is but it runs on a remote machine so now you might be thinking why do we need a staging environment right why not directly push the code into the production environment the live environment so Learners here is a reflection spot for you right so reflect on why do we actually need a staging environment now what are the advantages of having a staging environment you can pause this video and think about your responses before proceeding so why do we need a staging environment or why is it beneficial to have a staging environment right so the main reason is deploying a software system right it involves a lot of activities and configurations right we need to install libraries packages configure them maybe run scripts like initializing the database right and even if let's say our system is deployed and let's say if we want to update certain modules or if you want to add new features into this live application right if all of this is done directly into the production environment and if something goes wrong right the live system can crash and risk can affect users right so hence before uh deploying V test the system in the staging environment to see if the installation on updates and everything is working fine and since the staging environment is a replication of the production environment we can then replicate what we have done in the staging environment in the production environment another reason is this can the staging environment can be the place where new features can be previewed maybe to management maybe to different sales or marketing teams or maybe even to potential clients right if the client wants to see a new feature but you don't want to roll it out to everyone but just to a few select people then we can show it in the staging event and another reason is that performance testing or stress testing this cannot be done locally on our local systems or the testing environment right it has to be done in the live environment right and if it is done in production it can unnecessarily affect users who are using the system right and that's the reason why the staging environment is a good place where we can do performance and stress testing as well and then finally we have the production environment right it is also known as the live environment and users can directly interact or the software is housed in the production environment and available to all users now let's say we have successfully deployed our application to the production number right and the application is working now let's say that the client has requested for a new feature right maybe it can be a new user interface or a completely new feature right and now what does the team do we go through the entire software life cycle one iteration right we design and then we do some development right so individual developers in their own working copy they modify the code test it and then commit it to the shared code base and then it goes to the testing the staging and the production environment now one thing we have to be careful of is that this code from the staging environment has to be deployed into the production environment right and in the production environment is the actual Software System which users are using right and hence we have to follow some strategy so that this transfer of the system from the staging to the production environment is done smoothly right and these are known as different deployment strategies right so ways in which we can push code from staging to production right and we will look at some of these strategies in this video one such strategy is known as the staged deployment or the blue green deployment strategy and what we do is that we create a new separate production environment for the new version right without affecting the current one right so let's say that the blue system right or shown in the figure that is the live production environment and the new feature or the next iteration or the next version of the product is deployed to the green environment on shown in the picture right now after sufficient integration testing and other types of testing is done users are routed from the blue environment to the green environment right so a router takes care that all the users are now re-routed to the new production environment which is the green environment right and now all the incoming requests go to the green environment and the blue environment is idle okay and now what is the advantage of this model one key Advantage is that rollback is easy right so let's say something wrong happens or there is some error or the system crashes due to some error now we can easily reroute users back to the blue environment because the blue environment was working right so this is one key advantage of the blue green deployment strategy now let's say that the green environment is currently the live environment right and now we want to make a new update right so for the next update we push the new update from the staging to this blue environment right and then we make a switch right so in this way the blue and the green environment are regularly cycling between the real and the previous versions now the next deployment strategy is known as the canary deployment or the paste rollout or incremental rollout right so in this strategy we slowly roll out the changes to a small subset of users right and this is similar to the blue green deployment strategy but now instead of deploying the new version to all users right in one go we incrementally deploy to a few subset of users right now how do we select which users to send it to so one way to do it is to either do it randomly or based on user profiles or demographics or maybe even for let's say geographically distributed users right let's say there are multiple servers in different locations we might roll out to a particular region first right and we see if it is working properly there and then we roll roll it out incrementally to other places as well so one drawback of this deployment strategy is that we have to manage multiple instances at once right we have to manage the old version and the new version as well because some users are using the previous version and other users are using the new version right and hence we have to manage multiple instances as once another type of deployment strategy is the version deployment strategy right and here we allow users to choose which version to use right we keep all versions alive and we let users choose which version they want right so this is commonly used in mobile applications right let's say we are using an application like paytm Instagram Etc and we receive a notification to update our app right and if the user updates the deployment strategy is to Route them to the new version if not they remain in the previous version and again the drawback of this is we have to maintain multiple versions right we have to and let's say there are multiple updates and all users might not periodically update to the latest version right and that's why software companies they usually specify that from up to this date this following versions are supported after that we will stop giving support to those versions so that is what is known as the version deployment status so to summarize in this video we looked at several deployment environments starting from the local the testing staging and production and we also looked at various deployment strategies how we can deploy new versions of our application from the staging to the production right we looked at the blue green strategy the canary strategy and the version strategy we looked at advantages and disadvantages of each of them foreign