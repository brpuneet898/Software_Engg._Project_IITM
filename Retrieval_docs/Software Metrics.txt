so to recap we have looked at different tools and practices which can help us in the development process and in this video we will focus our attention on some practices and tools which will help us Write Clean and elegant code so you might be thinking why is it necessary to write clean and elegant code right so I might just write some code and quickly implement the feature and ship it out right that is what matters right why is it necessary to play so much emphasis on writing clean and elegant code so let's reflect on this for a moment please pause this video and think about some reasons for why we need to write clean and elegant code okay so what are some reasons so one reason is that as we saw earlier software development is a collaborative process right and you will be working with other members in your team and they would have to understand your code to maybe Implement some other features or functionalities and hence it is very important that you make your code easy to understand by other members in your team right and testing bugs in your code is easier right if the code is easier to understand for you as well as for others many times we write code and we revisit that code main maybe after many months or even years right and if and we often forget what code we write and if this code is not easy to understand often at times we ourselves forget what we wrote and this makes testing difficult even for us and the one main reason why we should write clean code is that clean and elegant code is easier to maintain as well as extend right later on if you or others they want to extend your code it is easier to maintain an extend code which is clean and elegant okay now that we have seen what are reasons to write clean code so what are ways in which we can improve the quality of parkour so there is a quantitative way as well as a qualitative way so we will look at some quantitative ways in this video right and this is done by using software metrics so what is software metrics so software metrics are a way of quantitatively measuring the complexity of our code right so if the code is highly complex that in turn means it is more difficult to understand so we will look at some software metrics in this video although there are several metrics we will be focusing on a few and there are several tools which analyze our code and give us metrics such as the number of lines of code the number of comments in your code and the codes complexity so we will be looking at one such tool known as radon so radon is a tool in Python which can help us which gives us software metrics for our code now tools like radon give us several software metrics one such software metric is known as cyclomatic complexity so now what is cyclomatic complexity it is nothing but the number of decisions a block of code contains plus one so for example this is a very simple Max function right which just contains a single if right and the cyclomatic complexity of this is the number of decision blocks in this case is just one plus one is equal to 2. so the cyclomatic complexity of this function is 2. So based on different constructs the cyclomatic complexity of our code changes right so as we saw if it is if there is an if condition the cyclomatic complexity of CC increases by one if there's an else if there is another if right so again the CC increases by one however for an else right it we are not introducing a new decision into our code right so that's why there won't be any change in the cyclomatic complexity for the for construct and while cons construct right the cyclomatic complexity will increase by one because there is a decision at the start of the loop for a 4 and a decision at the while step so Learners here's a reflection spot for you so we looked at this function right to calculate the first 10 Primes what do you think is the cyclomatic complexity of the first 10 primes function so let's look at how we can use radon to calculate the cyclomatic complexity of this code so first we install radon right so we can install it using the PIP command and since I already have it it will give me some messages okay and now I type in radon and I type in CC which denotes the metrics cyclomatic complexity and I give the file name and here the output is f stands for function right so first n primes is a function and it gives me a letter called a right and a denotes the simplest or a simple code block is referred to as a right and as we can see it's a very simple code block now if I want to actually know the value of the cyclomatic complexity of this function I have to specify the option s right and here it tells me that the cyclomatic complexity is 5. right so there are four decisions which are happening here in this code this while loop is one this four is another two three and four right so 4 plus 1 5 the cyclomatic complexity of this function is 5. right and based on our function right so these are different ranks which radon gives as we saw ours was the CC score was five and hence it's a low or a simple block and as the CC score increases you can see that the risk of maybe introducing new bugs or trying to understand the code also increases right so note that this is for each specific function and so for example if a single function has a cc score more than 41. right this means that there are around 41 conditional conditions which are happening inside a single function right and hence this makes it very highly error prone and it is unstable right and the way to reduce the cyclomatic complexity is to split this function into multiple functions and do some refactoring now that we have seen one code metric which is cyclomatic complexity let's look at another one another software metric is nothing but raw Matrix right so raw metrics are nothing but the total number of lines of code right this can include code comments dog strings all of it right blanks another type of metric is The Logical lines of code we look at what is the difference between logical lines of code and Source lines of code through an example and we have comments right so the lines of code plus comments plus blanks all of this combined together to form the loc which is the total number of lines of code now let's see how a tool like radon can give us raw metrics so this is the same function to calculate the first 10 Primes now I can use radon and provide the option Raw and call the function call the file right and here we can see that it gives me loc which is the lines of code is 26. right logical lines of code is 17 whereas the source lines of code is 18. right so what is the difference between these two so here in line 13 you can see that I have deliberately use the backslash symbol to split this 4 into two lines right so this is actually a single logical line of code whereas in my source code I have splitted it into two and this is not considered as a good practice for short lines of code right and just to illustrate this example or the concept of source lines of code and logical lines of code I have divided it into two so hence the lines of code are The Logical lines of code are just 17 whereas the actual Source lines of code are 18. right so if I just make this into a single line and then I run radon now you can see that the logical lines and the source lines of code are the same right then I have five lines of comments I have three blank spaces three blank lines right so all of these called raw metrics are available for me to see and it also gives me a statistic of the comments right so what is the ratio of the comments and the lines of code The Source lines of code so this can give me an idea of how well commented my code is so we can use the option raw in radon to give us the raw metrics in our code now the third type of metric which we can use is known as the halsteads metric so halsteads metrics identifies measurable properties in our software and the relationships between them so for example halsted's metrics calculate the number of distinct operators in our code operators like plus minus division modulo Etc the number of distinct operands then the total number of operators and operands and using these parameters it calculates various things like the vocabulary program length the volume difficulty effort Etc so we won't be going into the details of each of these metrics but let's look at how radon can give us the health State Matrix so we can use the option Hal and the file name and here we can see it gives us several metrics right and H1 is the number of distinct operators right so here you can see we have less than line 11 1 a modulo here which is two an increment here which is three another increment here which is four right so similarly it calculates the other parameters as well and based on H1 H2 N1 and N2 it calculates other Matrix so to summarize in this video we looked at various software metrics like cyclomatic complexity raw metrics and halsted's metrics and we saw that how we can use a tool like radon to give us these metrics now let's see how we can use a tool like radon in complex applications right so this code is an example of a flash card application in flask right so flask is a web application framework and we have this is an example of a flashcard application so I can use I can see that my application folder has files called API controllers and models so let me just see look at some metrics related to my controller uh file right so I type in radon I want to see the cyclomatic complexity of my controller file so this output gives me the complex cyclomatic complexity for each function right so I see that F denotes functions right so each of these are functions and I can see some of them are a which means that the functions are small and it's not very complex some are B right so for example the function in line number nine which is hello the cyclomatic complexity is 9 which is not too bad right but as you can see there are several force and in that nested hips are there so these are adding to the complexity so if files if functions are too complex then it's better to split them into different functions to reduce the cyclomatic complexity another metric I can just look at you know what are the raw metrics in my controller right so it gives me the lines of code and here you can see that the command statistics are not that good so the ratio of comments to lines of code is just six percent right and this gives me an idea that I need to incorporate or I need to add more comments into my source file I can also check for apis right so I have I have my apis function apis sorry my API is file let me just check the statistics for that here also you can see that the comment ratio is less so you can use tools like radon to get a sense of how well written your code is if your code is highly complex if sufficient documentation and and comments have been written into your code so tools like radon will help you Write Clean code