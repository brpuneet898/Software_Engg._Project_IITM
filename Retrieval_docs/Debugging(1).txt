so to recap in this week we looked at how we can write code we looked at a development environments Frameworks then we looked at how we can share and maintain different code versions using a tool like git in this video we will be looking at debugging and as we saw earlier debugging is a very important task which is software developer does so let's look at some key terms which are used in debugging so one important term is the word error the term error so what is an error so error is nothing but a discrepancy between the actual Behavior and the intended Behavior so as a developer you have an intented Behavior based on the specifications or the requirements but as you run your program you realize that there is a deviation from this intended Behavior so this discrepancy is known as an error and now when this error is observable right in terms of let's say an incorrect output value or an exception now that is known as a failure and now what is a fault a fault is nothing but the line line of code where this failure or this observable error has occurred and that is known as a fault so then what is debugging so debugging is nothing but determining the cause of this failure and rectifying your code so that this failure goes away so what are the different steps in debugging well these are the broad steps and it is quite intuitive and obvious right so in order to debug uh fault we have to first reproduce a problem right reproduce or for a particular input maybe the program is deviating from the intended Behavior so reproduce a problem maybe specify an input for which this error occurs find the cause of this defect you investigate the fix so you come up with a fix and you implement it and you test whether the error is going away or not right and these are obvious steps one doesn't debugging so in this video we will be focusing on how we can find the cause of a particular defect so let's reflect on this question for a moment so I'm sure most of you have written programs and you would have encountered errors or defects as you run your programs right so can you think of some techniques which you have used to debug a defect how do you actually go about debugging a defect you can pause this video and think about how you debug a defect before proceeding foreign so now let's look at some techniques for debugging right so one way to debug is to insert a lot of print statements in between lines of code right and this is known as logging and I'm sure this practice which most of you do right if there is some unexpected output or some errors you insert some print statements at strategic locations and examine the output and this gives us an idea about where our code is going wrong another way is to use dump and diff where you use a div tool a diff tool gives you the difference between two output files and you can use this to compare logging data between uh correct execution and an incorrect execution another important technique is to use a debugger and use the stepping in function in a debugger we will look at this in more detail in this video and another technique is to use a tool which is known as a profiling tool so profiling tools they give us statistics about how often or how long various parts of a program are executed so developers use such profiling tools also in the debugging process so these are different techniques which we can use for debugging and now we will look at what strategies we can use while debugging a program so one common strategy is manipulating the input right so we have a program which is not giving the desired output for certain inputs right so we provide an input and we observe differences in output and based on this set of inputs and outputs we try to determine what the error or fault is in the program and this is a common technique which we use right so let's take an example so the program on the right is a simple program which calculates the first n Primes so it takes n as an argument and it returns a list of the first n Primes however there is a logical error in this program so Learners I want you to go through this program and try to determine what The Logical error is you can pause the video here and think of what the error is before proceeding so now let's look at how we can use the input manipulation strategy so here is the program and I try giving a set of inputs right so I run this program and I start with 2. and for this input it is giving me the correct output 2 comma 3 right which is the first two prime numbers now when I type in 3 I am still getting the same output 2 comma 3. instead it should have been 2 comma 3 comma 5. now if I try it for 4 again it's giving me only three prime numbers the first three prime numbers for five again just three prime numbers for six it's giving me four prime numbers so what all can we infer from these set of inputs and outputs so one thing is that the logic so it is printing prime numbers only right so it is giving the set of prime numbers but the error is or The Logical error is in the number of prime numbers which it is giving right so instead of 6 it is giving me 4 instead of 5 it is giving me 3 So based on this now I look at the program and look at the variable or the logic which determines how many numbers should be there in the N primes list right and I realize that variable I is the variable which counts the number of elements in the list right in the N primes list and if you have noticed we have to increment I only if the number is prime right whereas here we are incrementing it outside the if condition so that has been that was the error now if I put the increment in the if condition and now if I try running it let's take say 3 that four five right so now it is giving the correct output so now what did we do in this strategy we just gave us different set of inputs we looked at the outputs and then we tried to determine what the error is so this is a strategy which you can use while you debug a given program so the first strategy which we saw was input manipulation right so we give a set of inputs observe the differences with output and try to see what the fault of the error is another strategy for debugging is known as the backwards debugging strategy and here what we do is we in a given program we find the statement that generated the incorrect output it can be a syntax error or some other error and we follow data and control dependencies backwards right to find the incorrect line of code right so we look at the statement which has the incorrect output and then we go back and see which all data and control dependencies are there and then we look at the incorrect line of code so let's look at the same first prior first n primes program itself right so this is the code for that and I've made another change to this code right and now when I run this program let's say I give the number five I realized that my program is not terminating right and now I can use the backward strategy to see what is the error right so based on this what I can realize or what we realize is that this while is not terminated right and this while is not terminating because the reason being I is never greater than or equal to n right so if you look at the code we realize that I is incremented at this place right and for I to be increment so now I start working backwards so I realize the error is that or The Logical error can be that I is not getting incremented and now I start working backwards right and I see why is I not getting incremented the reason being Prime flag is not true right and however I see that fly Prime flag has been set to True here right but what we now realize is that if the number is not prime that is if it is divisible by some other number then we are setting Prime flag to false right and after this Loop we are not setting Prime flag back to true right and that's the reason why I is not getting incremented and hence this Loop is not terminating right so this Prime flag being set to True should be at the start of every iteration of the while loop right and now if I try running this code right the program is terminating and giving the correct output right so what did I do in this backward strategy I examined the line of code which has the error right and I work backwards I went to the previous lines and tried to see what how the data and the control is changing and then I deduced what the error was so that was a backward strategy now the inverse of that is the forward strategy right you find the event that triggered the incorrect Behavior and you follow control flow right in the forward Direction until the incorrect state is reached so this is the inverse of what we did earlier right for the same program now what I do is I start from the beginning and mentally start tracing you know what are the values of the variables and I go through each iteration of the loop and then I can also come to I can come to the same conclusion right as the backward strategy and I realize that Prime flag initially was here it has to be brought here because Prime flag once it's set to false it's not becoming true again so that's what the forward strategy is and finally there is another strategy known as Black Box debugging right and this has to do whenever we work with apis or libraries from other sources right so we look at documentation we look at code examples to understand what is the correct usage of that API we do not have access to the inner workings of those libraries and apis but by going through the documentation and code we are able to understand if we have made certain errors or mistakes while calling an API or a library so these are different strategies which you can do as you debug your code now that we have seen what these different strategies are now let's look at how we can use a debugger to debug our code and in this video we will be looking at how we can use pdb which is the python debugger so this is the code for calculating the first 10 primes which we saw earlier and there is an error in my code here I have placed Prime flag equal to true above the while loop and not inside right and now if I run this code right it will the while loop won't terminate right now we in order to use pip in order to use pdb you have to install it using the PIP Command right pip install pdb and since I already have it I'm not going to install it again and you can call the debugger by specifying or calling the module pdb and the file right and now you see that what the debugger does is it pauses execution and allows you to step in or move execution line by line right so currently you can see that execution is paused at line number seven right which is the definition of the first and Primes and it allows you to execute each line of your code right if you want to exit the debugger you can do control Z right another way to invoke the debugger is to write code itself right so you can import the pdb module and you can just call the function PDP dot set Trace right and now you have to just run the first n primes python file and you can see that execution is paused here right so it tells me now currently I am the next line which the debugger will execute is this right and now now in order to execute or move to the next line I can use the option called n right I type in n and press enter right it will go to this line and now if I enter 3 right now it's telling me that I am in line 28 and the next line of execution is this right first n Primes now if I press n again now I can see that it has gone into first and primes and it's executing the first 10 primes function but this is not very useful right I I really want to know what's happening inside the first n primes function so what I'll do is I will exit and I will run this again and now when I enter a number and what I will now do is use the option called s which will step into the first and primes function right and now you can see that the next line which will be executed is the is line number seven which is the first 10 primes method right so now I can press n and now I have entered the first 10 Primes function right again can go n so now I've come to line number nine right the next line to be executed is line number nine right so currently I am on line number now the next line to be executed is line number 10 right so using the n and the S command I can move to the next line as well as step into particular functions now let's say I want to know the current value of a variable a list Etc so I can use the P option right so here let us say I want to know what is the value of I so I type in p and let's say I and it gives me the output 0 right so we have just initialized I to 0 right and you can type in all sorts of Expressions right so let's say I comma Prime flag comma num write something like this I num and Prime flag right I can create a list of variables expressions okay so the next line to be executed is prime flag so I haven't initialized Prime flag equal to True yet that's why it's giving this error so I click I move to the next line right and now if I try to execute this expression right I get I is 0 num is 2 right and Prime flag has been initialized to true right and now I can keep on executing the the code and check what is happening so now I'm my con the control is currently here so Prime flag as we saw was true so it will enter into this if condition and I press n right I gets incremented now if I want to see what is my n primes list it is 2. right so using the N command n and S and P I can you know get the different values of a variable at the current state right so another way in which we can use the debugger is to set up break points right now if you have noticed it is getting a little problematic here because I need to continuously press the n button right I have to type in N to get each and every line but oftentimes I just want to know what are the values of variables for example for at a particular line right I am not interested in stepping through each line in the program I just want to know the values of variables at particular strategic locations in my code right so here for example I want to check when Prime flag is becoming true right so one way to do this is to set up what is known as a break point in line number 17 right so debugger allows you to set up break points and what I'll do is again run the debugger and I use the option b to to tell the debugger to set up a breakpoint right and this is my file first 10 primes set up a breakpoint at let's say line number 17. so when I press enter so now the debugger says break point 1 has been set up at line number 70. right now I can use the N to move to the next line right but now I can use the C option which is continue which tells me continue which tells the debugger to continue execution of the program until you reach the break point so now when I press when I type in C and press enter you can see that the control has directly come to line number 17. right and now at line number 17 I can examine what the values of let's say I num and Prime is right okay I is 0 num is 2 Prime flag is true so it's now since Prime flag is true I when I press n it should go to line number 18 yes it is appending the prime number into the N primes list right and it's incrementing I now again I can press the C option and again now the control goes to the execution happens and the control stops again at line number 70. and here now again I can examine what higher numbers yes num is three so three should also be included in the num primes list that's what is happening right so till now I don't see any errors in my code now again I press C and now control has execution has resumed now if I see what the values are yes so when num is 4 right my Prime flag is false right and it should not enter the if condition if block let's see if that is what is happening yes right now on continuing the execution now when I look at the values I realize that num is 5 and num is a prime number but my Prime flag has been set to false right and 5 should have been included in the num primes list but it's not happening right so now if I press n right it's not entering the if condition num is getting incremented right and now if I look at if I want to see what is n primes list I realize that 5 is not getting included in the list right so this is the way in which you can use a debugger to step into or trace the execution at each line of your code set up break points and examine the values of variables so to summarize this is what we saw in the pdb which is a python debugger you can call the invoke the debugger by importing the pdb module and calling the set Trace function we looked at various options like executing the next line stepping into a function we can Cal or we can find out the values of variables at a particular line using the P option and we saw that we can set up break points also and use the C option to continue execution till that breakpoint