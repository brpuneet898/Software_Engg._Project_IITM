videos of this week we looked at Key activities in managing a software project we looked at activities such as project planning estimation risk management and these are common practices and tasks in the plan and document perspective and if you recall in the plan and document perspective the goal has been to make software engineering predictable in budget and schedule so there is a lot of documentation and planning at the start of the project however if you look at it from the agile perspective agile does not try to predict cost and the schedule at the start of the project itself right instead it relies on working with customers on frequent iterations and then agreeing on a time and how much effort and cost is required now let's just recall the agile perspective and the philosophy which we discussed in the first week right so the agile life cycle is divided into iterations of typically one to two weeks and in each iteration certain user stories are implemented that is a working prototype is Created from these user stories and then users examine the work done in this iteration to see if it matches the requirements and then user stories are prioritized for the next iteration new user stories are created as well and then this process continues till the entire system is built so in this video we will be looking at how work is actually done from the agile perspective or how is planning done how is scheduling done and what all happens for this work to get done so let's look at how teams are formed right so as we saw in the plan and document perspective one of the first jobs of the project manager is to form and organize a team so in the agile perspective the team size is roughly four to nine people for a particular project of course this varies from company to company and now the question is if you have Steve now how do you organize development in this team right and there are various strategies and Frameworks and we will be looking at one of them in this video which is known as scrum and let's see what scrum looks like so at the heart of scrum is a Sprint right a Sprint is short time box period when a scrum Team Works to complete a set amount of work right so there is a team which works in what is known as different Sprints or iterations and with scrum this product is built in a series of iterations which are known as sprints and in the in these prints the complex project is broken down into small pieces now let's look at the main roles in a scrum team so there are three main roles in a scrum team one is the development team so the people who do the actual work of developing the software and many of you might think of only coders or developers in the development team right but this is not so so whoever is required to complete the work in that given Sprint they can form a part of the they are they form the part of the development team so it can be designers developers testers who form a part of a development team now the second role is that of a product owner right a product owner is a person who interfaces between the client and the development team and the product owner ensures that the team is delivering the most value to the client and the product owner also takes into account other stakeholders in the organization for example the constraints of developers technology constraints Etc and communicates all of this to the client so the most important responsibility of the product owner is to take all these inputs from the clients and the development team and prioritize the work to be done in a particular Sprint foreign and the third role is known as a scrum master the scrum Master ensures that all the activities in the scrum are being done well right he or she helps the product owner Define value and the development team to deliver the value to the product the scrum Master also serves the organization at large helping the organization understand what scrum is and create an environment that supports scrum foreign activities in scrum so before you start a Sprint view conduct a meeting known as a Sprint planning meeting so this is a collaborative event between the product owner the scrum master and the development team right and the team asks two basic questions about what work can get done in this print and how will the chosen work get done right so the team chooses a subset of all the tasks which are required to be done and decides on which tasks have to be done in this spread and the Sprint planning activity or meeting is time boxed and it is roughly two hours per week of the iteration so then how do we know what all are the tasks which are required to be done in a particular Sprint or what is the entire set of tasks for developing that product so that is where the product backlog comes in right so product backlog is a prioritized list of work for the development team and this is derived from the user stories and the requirements so the most important items are shown at the top of the product backlog so that the team knows what has to be delivered first so now who prioritizes these items in the product backlog so it is not the product owner but in the Sprint planning meeting all the team members collectively come up with the items which will be worked on in in this print in a particular Sprint so for example the product owner may say you know the client requires these user stories immediately but the development team may State their constraints and then the entire team would come to a consensus now let's look at an example of a product backlog let's take the example of the Amazon Seller portal itself right and in previous weeks we have come up with some user stories based on the requirements and this involved you know managing the catalog managing the inventory tracking the orders payments sales Etc and now we have to decide for a particular Sprint what are the items we need to work on so let's say for the first print the developers say okay we can work on catalog management maybe we can work on one a and one B of adding and editing catalog items but then the product owner tells well actually the client wants to see catalog management as well as inventory management so then the developers might say that you know it's not possible to complete both in this print maybe we can focus on adding a catalog item and maybe adding an item in the inventory so we can focus on one a and two a so the entire team concern comes to a consensus and decides to work on one a and 2A in this Sprint so this image is taken from a popular software management software which is known as jira so in jeera I can create a backlog which has all these issues or these are known as the items in the backlog and this is similar to what we saw in the previous screen and then for a particular Sprint I can create Sprints and I can take items from the backlog and add it to the Sprint and then I can decide a timeline for the Sprint I can assign specific user stories to specific people and all this can be done in most software project management tools and by the end of the Sprint planning meeting now the team has decided which are the issues which will be worked on in this particular Sprint and now the team is ready to start work on the Sprint backlog taking items from the backlog to the in progress and the done tabs so here you can see that there are three boards and as we saw in the previous screen we have decided to work on two items and these two items are present in the to-do list for this print for Sprint one so now that we have seen what happens in a Sprint planning meeting and we know what are the items to be worked on for a particular Sprint now how does the team make progress for in this particular Sprint right and this is done using a stand-up or a daily scrum meeting so this meeting is a daily meeting which involves the development team the scrum owners from master and the product manager and basically each member of the team answers three key questions one is what did I work on yesterday what am I working on today and what issues am I facing or what issues are blocking my progress right and when each member answers these questions it strengthens the team because everyone shares the progress of how they are contributing to the team so this daily scrum meetings continue till the end of the Sprint and hopefully by the end of the Sprint the team would have developed a prototype or the features for that particular Sprint and this progress is reviewed in the Sprint review meeting right so after that Sprint the team demonstrates what they have completed during the Sprint review meeting so what all things were there in the to do or the in progress buckets they would have ideally been moved to the done bucket and the team demonstrates what they have completed in that spread and finally there is a Sprint retrospective meeting and there this serves several purposes so one is to evaluate the last Sprint in terms of the Team Dynamics how did the team work the processes the tools so it is basically an evaluation of how things went in the previous print and also discuss and talk about which user stories or tasks went well or didn't go well do well so what are the reasons behind that and finally creating and implementing a plan to improve how the team does work right so that it will improve in the upcoming sprints so to summarize we looked at a framework known as scrum in this video right and scrum has several activities the key being the Sprint which is a short one to two week duration in which certain items are decided on and the team works on completing those items we looked at the scrum team we looked at several meetings or several activities in the scrum which is the Sprint planning the daily scrum meetings and the Sprint review and the Sprint retrospective meetings which are conducted after this print ends now let's look at how we can do project scheduling in agile so if you recall in the plan and document perspective we looked at project scheduling techniques like breaking down the activity into tasks and creating representations like a Gantt chart so in the agile methodology we do it slightly differently as we saw in this video work is done in Sprints or iterations of typically one to two weeks and in each iteration certain user stories are implemented so the key indicator of progress is how many user stories have been delivered to the client in each iteration so we can do project estimation by simply counting the number of user stories completed per iteration and then calculate the average number of stories per week and this will give us an estimate of how much time effort and cost is required to complete the entire project so let's take the example of the seller portal so we previously identified that we require or we can complete two user stories in Sprint one and we have a total of 8 plus to 10 user stories so we can complete the entire set of 10 user stories in five iterations which is nothing but and let's say each iteration takes two weeks so in 10 weeks we can complete the entire project so this helps us Define the schedule for the project so now let's just reflect on this process which we did so what we are saying is that by counting the number of user stories completed per Sprint we can estimate the time required to complete the project so do you think this is a good idea so what can go wrong if we follow this approach for estimation you can pause this video and think about some issues related to this approach and then proceed the key issue is that not all user stories require the same effort right some are much harder to implement than others and this can lead to mispredictions so one solution can be to rate each user's story on a scale right so we say the rating for a user story is one if it's a very straightforward and a simple user story two if it is of medium difficulty or effort and three if it is a very complex user story so now we have assigned points to each user story and now we can calculate what is known as a velocity which is nothing but the number of points per iteration or Sprint right and this term velocity in a way it measures the work rate of the team right in one iteration how many points is the team able to complete and this helps stakeholders also to get an idea of how many iterations it will take a team to add the desired set of features for example in the seller portal the team assigns points to each user story so here we can see that ad catalog is assigned two points add inventory item is also assigned two points and some other user stories are assigned one point and now the team decides to work on these two user stories in Sprint one and let's say after this print they have successfully completed these two items so we see that the velocity of this team is 4 2 plus 2 so in a Sprint this team is able to complete user stories totaling four points right so now in the next iteration instead of just working on two user stories the team can very well work on all four because it requires Four Points to complete and we know that the team can complete four points in a single iteration so in this way project scheduling for an Agile development process can be done using points and velocity so now we just compare the project scheduling in the plan and document and the agile perspectives so in the plan and document perspective it is done early in the project right at the start where we break down the project into tasks and then we create Gantt charts and Milestones which Define the schedule of the project whereas what we saw in the agile perspective is that we create user stories and we assign points to these user stories and we calculate velocity to and this where this term velocity helps us schedule the iterations and Sprints and how much time the project will take to get complete