in this video we will be looking at certain heuristics for feedback for providing appropriate feedback to users so the first heuristic is showing the status so this means that we need to keep users informed about what is happening through appropriate feedback and this feedback should be provided within a reasonable amount of time you have seen multiple instances of this in several applications so for example the loading status in browsers so it can be very frustrating if i have to stare at a blank screen while the page is loading so is the page actually loading is there an error so if i do not have a an animation which shows the loading status then it's very difficult for me to understand what the problem is another example is showing status of how much time a particular action will take so let's say if i'm downloading something how much time will it take to download so that is a useful information which can be given to users another example of showing status is to provide next steps to an action so for example if you have filled a form or if you have created a new email address so what are the next steps otherwise as a user i will not know what i should do next another example of showing status is to provide warnings in advance so it is important to let users know of some action which is needed from their side so for example if the gmail space is running out appropriate information on gmail can help me take appropriate steps such as buying storage the next heuristics are for preventing errors so why do users make errors so many times we often attribute errors which users make to something that the user did but it can also be the case that certain aspects of the user interface led users to make these errors so what are ways in which we can prevent users from making errors in the first place one example can be to include helpful constraints so for example this is an interface for booking a flight booking a flight from and the return journey as well and here you can see that the return date cannot be before the departure date so i have mentioned the departure date date as july 19th and the dates before july 19th have been grayed out so in this way the interface is constraining the user by not allowing them to fill a date before 19 july and hence we can prevent errors of of a user adding a date which is before the departure date another way in which we can prevent errors is to offer suggestions for example i may really not know what to do and the user interface can provide suggestions so that errors will be prevented later on so for example on the browser i type usability and i'm really not sure what i'm looking for but google auto suggest provides me a list of options as we see here and this is useful for me to choose the particular aspect of usability i am looking for now that we have seen how we can prevent errors the next heuristic is to support error recovery so how can we help users once they have made an error how can we support them to recover from these errors so one way to do it is to make the problem itself very clear so users might be interacting with your ui for the first time and it is essential that you specifically mention what the problem is so for example this is facebook signup form here a user has clicked on sign up without entering any of the details and here you see that each of these fields are highlighted in red and thus fa the interface makes the problem really clear for users and many times we should not only make the problem clear but we need to provide a solution as well so in the same interface you can see here that in this field the user had to enter an email a valid email or a mobile number and the tooltip here specifies the solution to this problem so it is important that our user interfaces provide appropriate solutions when users make errors another way to support error recovery is to provide an alternative to users there might not be an easy solution or the right solution but you can always offer different alternatives or different pathways for learners to reach their goal so for example here on in the google search i have typed in jacob nielsen and the spelling of nielsen is wrong and many a times you have seen google auto suggesting the correct search query so this is an example of how the user interface is providing an alternative for the learner and helps them support or helps them recover from their error the final heuristic is providing help to users so we need to ensure that help is easy to search and you must have seen that most tools have a menu item known as help which provides important help topics trainings updates etc another important aspect is to provide help in context write in time when and where the user needs it this is the interface of a learning management system known as moodle and in this case you can see that if i want to add a new course i can fill the details of the course and the course gets created however as a new user i may not know exactly what course visibility means so just next to each attribute like the course category the course visibility you have a help icon which will provide you details about that particular field this way help is provided in context exactly where and when the user needs it so in this and the previous videos we have seen several heuristics by which we can evaluate user interfaces so after the initial prototypes are ready you can allow experts to evaluate your interface so experts they do multiple passes through your prototype and produce a list of issues that violate some of these design heuristics so collecting feedback from several experts will help you fix multiple usability issues in your prototype and these heuristics are also kind of a self check for you and can enable you to design effective and usable software interfaces