we looked at certain characteristics of a good design we discussed that a good design has to be correct has to be efficient it should be easy to maintain and also easy to understand by other members in the development team so now let's take an example so here are two pictures which are shown and the boxes M1 M2 M3 M4 M5 are components or modules which have different functions which Implement some functionalities and now the arrows denote when one module calls some function in another model so looking at these two designs which do you think is a better design which do you think is better to understand so can you intuitively think of why you think it is easier to understand one design over the other you can pause this video and think about this before proceed so intuitively most of you must have felt that the figure on the left is better than the one on the right so let's look at some reasons for that so one reason is that the number of arrows as we said that the number of arrows denote the communication between modules the figure on the right they have more arrows and it looks fairly unstructured right so what does this mean this means that many modules are sharing a lot of information with each other so in such situations we say that the modules are tightly coupled or highly coupled so tightly coupled modules they share a lot of data among themselves so if you see the figure on the right you see that M2 M3 M2 and M5 M3 M4 M5 all are sharing a lot of data or information among themselves on the other hand Loosely coupled modules they do not share a lot of information between them for example the figure on the left you see that M2 M3 and M4 they do not interact with each other much and hence M2 and 3 and 4 are Loosely coupled so now let's reflect on why there is a lot of information sharing between modules right why do you think that is the reason the main reason is that the functionalities are spread across different modules rather than being grouped together into a single individual module right so when all the functions in a module they perform a single objective the module is said to have good cohesion for example the figure on the left you can see that M3 does not depend on any other module the reason can be that the functionality is required by m by M3 are in M3 itself whereas if you look at the figure on the right you can see that M3 calls M2 M4 M5 the reason being there might be some functionalities required by M3 in M2 some other functionalities in M5 and so on so if all these functionalities were brought together into M3 then M3 would not have to depend on the other modules and hence in this case we see that M3 is a good cohesive module so to summarize what is coupling and cohesion coupling is a measure of the degree of interaction between two modules it talks about the interaction between modules whereas cohesion is the measure of how functions in a module they cooperate together to perform a single object now here is a question for you to think about what do you think are characteristics of a good design should it have high cohesion and high coupling low cohesion and high coupling High cohesion and low coupling or low cohesion and low coupling so you can pause the video here and think about which of these characteristics are of a good design before proceeding so the thing to note is that if the coupling is high so what does that mean there is a lot of interaction between modules and that generally means that the cohesion is low right and vice versa so we cannot have designs which have high coupling and high cohesion or low coupling and low covision right so this rules out option A and D so now let's look at option b right so let's understand what happens when modules have low cohesion and high coupling so what does low cohesion mean low cohesion means that functions in each module they are performing varied operations and is this good or bad so this is not good right because it makes it difficult for developers to understand what the purpose of this module is what about high coupling so in high coupling a lot of data is interchanged or shared between modules and this is also not desirable so hence it is important that modules have high cohesion and low coupling so to go back to our example the figure on the right if some reorganization is done like moving functions between different modules then maybe some of the communication can be avoided so for example can we move functions between M2 M3 and M4 so that three of them three of these modules are fairly independent if we can do that then we will get a figure similar to that on the left so to summarize a good design is a design which is modular and by that we mean the problem has been decomposed into a set of modules that have only limited interactions with each other so if different modules have little interaction with each other then each module can be understood separately right then we looked at two terms cohesion and coupling so when the functions of the module they cooperate with each other for performing a single objective then we say that the module has high cohesion whereas if the functions of the module they do very different things and they do not perform or they do not cooperate with each other to perform a single piece of work then that module has very low cohesion and High coupling means that the function calls between two modules they involve passing large chunks of shared data right and this is not desirable so now that we have seen what cohesion and coupling is let's look at the different types of cohesion and coupling so there are different types of coupling depending on what type of information is shared between modules so let's look at the first one which is data coupling so two modules are data coupled if they communicate with each other using a primitive data type like an integer float character Etc and this is passed as a parameter between the two modules so let's take an example of the Amazon Seller portal right so let's say I want to view the inventory items of a particular seller so how can I do that so the seller module will query the inventory module to view the inventory using a seller ID which is usually an integer or a string right so this is an example of data coupling where communication between modules happen through primitive data types the next type of coupling is known as control coupling right so control coupling occurs between modules when the data is passed and this data influences the internal logic of a module so examples of these are flags and switches so what does this mean so let's take the previous example itself now in this figure we see that the seller module has a function known as perform actions which takes a flag and now based on the value of the flag the appropriate function in the inventory module is called right so the seller module it passes a variable operation flag which can take values 0 1 and 2 for example and the inventory module code of functionalities it depends on the value of this flag so if the flag is 0 so in the inventory module there will be different condition so if the flag is zero then the view inventory function is called if the flag is 1 then add product to the inventory function is called right so based on what value of the data is passed the appropriate function gets called in control coupling the next type of coupling is known as common coupling so two modules are commonly coupled if they share some global data items so taking the previous example itself so operation flag it can be a global variable however this means that there may be other modules also which will have access to the operation flag variable and it is very likely that multiple concurrent changes can happen and this can lead to an unstable system or a design so this type of coupling is generally not recommended and finally we have content coupling and content coupling occurs between two modules if one module refers to the internals of the other model so for example if one module branches into another module or if one module refers to the changes in another module right and this rarely happens in procedural languages or object oriented languages like Python and Java because the data and the member functions are encapsulated to form a single unit so content coupling rarely occurs in real practice now that we have seen what are different types of coupling are now let's look at the different types of cohesion so what do we mean by cohesion to recap cohesion is when functions of the module they cooperate with each other to perform a single object right then we say that the module has good cohesion so let's look at the different types of cohesion so the best type of cohesion is functional cohesion where different functions of the module they cooperate to complete a single specific task so let's take the example of the inventory module in the seller Port right so if this module has functions like view inventory adding item to an inventory deleting item from an inventory so all these are functionalities related to inventory manager and hence we say that the inventory module has good functional cohesion now the next type of cohesion is sequential equation so what does this mean so as the name suggests different functions of that module they execute in a sequence so let's take the example of order processing right so how do you process an order you first create an order and then you can check the availability of that order and if the order is available or the product is available then you place the order so here you see that these functionalities they execute in a sequence and we see that check availability looks at the product and looks at the inventory and hence it really does not belong to the order processing module however it is placed here so that different functions in the module they execute one after the other the next type of cohesion is communicational equation so module is said to have communicational cohesion if all the functions of the module they refer to our update the same data structure so for example instead of having an inventory or a catalog module let's say we just have a single product module right which has a list of different products so add edit delete off catalog inventory all of this happens in this module itself right and they are updating or referring to the same data structure which is a setup or list of products so in this case the product module is said to have communicational cohesion the next type of cohesion is procedural cohesion and in procedural cohesion the activities in the module they are related by a sequence and how is it different from the previous types of cohesion the set of functions are executed one after the other but they work towards entirely different purposes so let's take an example let's take an example of a seller portal module which encomposes most of the things in the seller portal for example it can have a login function then an ad product then add product to catalog adding item to inventory in placing the order then updating the inventory and log out right so this these activities are related by a sequence but they work towards entirely different purposes right so login and log out are actually separate from adding products and adding products are different from placing orders right so these should ideally be in different modules but in this example we see that all of them are placed in a single seller portal model finally we have coincidental cohesion in which modules have functions with meaningless relationships with each other and this is an extreme type of cohesion and we rarely see this in good designs